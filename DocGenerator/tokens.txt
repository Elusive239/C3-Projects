Line 1 -- Type: 'MODULE'			Value: 'module' 
Line 1 -- Type: 'IDENTIFIER'			Value: 'docgenerator' 
Line 1 -- Type: 'SEMICOLON'			Value: ';' 
Line 2 -- Type: 'IMPORT'			Value: 'import' 
Line 2 -- Type: 'IDENTIFIER'			Value: 'libc' 
Line 2 -- Type: 'SEMICOLON'			Value: ';' 
Line 3 -- Type: 'IMPORT'			Value: 'import' 
Line 3 -- Type: 'IDENTIFIER'			Value: 'std' 
Line 3 -- Type: 'COLON'			Value: ':' 
Line 3 -- Type: 'COLON'			Value: ':' 
Line 3 -- Type: 'IDENTIFIER'			Value: 'io' 
Line 3 -- Type: 'SEMICOLON'			Value: ';' 
Line 4 -- Type: 'IMPORT'			Value: 'import' 
Line 4 -- Type: 'IDENTIFIER'			Value: 'std' 
Line 4 -- Type: 'COLON'			Value: ':' 
Line 4 -- Type: 'COLON'			Value: ':' 
Line 4 -- Type: 'IDENTIFIER'			Value: 'io' 
Line 4 -- Type: 'COLON'			Value: ':' 
Line 4 -- Type: 'COLON'			Value: ':' 
Line 4 -- Type: 'IDENTIFIER'			Value: 'file' 
Line 4 -- Type: 'SEMICOLON'			Value: ';' 
Line 5 -- Type: 'IMPORT'			Value: 'import' 
Line 5 -- Type: 'IDENTIFIER'			Value: 'std' 
Line 5 -- Type: 'COLON'			Value: ':' 
Line 5 -- Type: 'COLON'			Value: ':' 
Line 5 -- Type: 'IDENTIFIER'			Value: 'core' 
Line 5 -- Type: 'COLON'			Value: ':' 
Line 5 -- Type: 'COLON'			Value: ':' 
Line 5 -- Type: 'IDENTIFIER'			Value: 'mem' 
Line 5 -- Type: 'SEMICOLON'			Value: ';' 
Line 6 -- Type: 'IMPORT'			Value: 'import' 
Line 6 -- Type: 'IDENTIFIER'			Value: 'std' 
Line 6 -- Type: 'COLON'			Value: ':' 
Line 6 -- Type: 'COLON'			Value: ':' 
Line 6 -- Type: 'IDENTIFIER'			Value: 'collections' 
Line 6 -- Type: 'COLON'			Value: ':' 
Line 6 -- Type: 'COLON'			Value: ':' 
Line 6 -- Type: 'IDENTIFIER'			Value: 'list' 
Line 6 -- Type: 'SEMICOLON'			Value: ';' 
Line 7 -- Type: 'IMPORT'			Value: 'import' 
Line 7 -- Type: 'IDENTIFIER'			Value: 'std' 
Line 7 -- Type: 'COLON'			Value: ':' 
Line 7 -- Type: 'COLON'			Value: ':' 
Line 7 -- Type: 'IDENTIFIER'			Value: 'io' 
Line 7 -- Type: 'COLON'			Value: ':' 
Line 7 -- Type: 'COLON'			Value: ':' 
Line 7 -- Type: 'IDENTIFIER'			Value: 'path' 
Line 7 -- Type: 'SEMICOLON'			Value: ';' 
Line 9 -- Type: 'MACRO'			Value: 'macro' 
Line 9 -- Type: 'IDENTIFIER'			Value: 'void' 
Line 9 -- Type: 'IDENTIFIER'			Value: 'String' 
Line 9 -- Type: 'PERIOD'			Value: '.' 
Line 9 -- Type: 'IDENTIFIER'			Value: 'replace' 
Line 9 -- Type: 'OPEN_PAREN'			Value: '(' 
Line 9 -- Type: 'IDENTIFIER'			Value: '&self' 
Line 9 -- Type: 'COMMA'			Value: ',' 
Line 9 -- Type: 'IDENTIFIER'			Value: 'char' 
Line 9 -- Type: 'IDENTIFIER'			Value: 'toReplace' 
Line 9 -- Type: 'COMMA'			Value: ',' 
Line 9 -- Type: 'IDENTIFIER'			Value: 'char' 
Line 9 -- Type: 'IDENTIFIER'			Value: 'with' 
Line 9 -- Type: 'CLOSE_PAREN'			Value: ')' 
Line 9 -- Type: 'BODY'			Value: '	// io::printn("Replacing...");
	ZString zstr = self.copy_zstr();
	for(int i = 0; i < self.len(); i++){
		if(zstr[i] == toReplace){
			self.set(i, with);
		}
	}
	// io::printn("Done...");' 
Line 11 -- Type: 'MACRO'			Value: 'macro' 
Line 11 -- Type: 'IDENTIFIER'			Value: 'bool' 
Line 11 -- Type: 'IDENTIFIER'			Value: 'char[]' 
Line 11 -- Type: 'PERIOD'			Value: '.' 
Line 11 -- Type: 'IDENTIFIER'			Value: 'equals_string' 
Line 11 -- Type: 'OPEN_PAREN'			Value: '(' 
Line 11 -- Type: 'IDENTIFIER'			Value: 'char[]' 
Line 11 -- Type: 'IDENTIFIER'			Value: 'self' 
Line 11 -- Type: 'COMMA'			Value: ',' 
Line 11 -- Type: 'IDENTIFIER'			Value: 'String' 
Line 11 -- Type: 'IDENTIFIER'			Value: 'other' 
Line 11 -- Type: 'CLOSE_PAREN'			Value: ')' 
Line 11 -- Type: 'BODY'			Value: '	if(self.len != other.len) return false;
	for(int i = 0; i < other.len; i++){
		if(self[i] != other[i]) return false;
	}
	return true;' 
Line 13 -- Type: 'MACRO'			Value: 'macro' 
Line 13 -- Type: 'IDENTIFIER'			Value: 'bool' 
Line 13 -- Type: 'IDENTIFIER'			Value: 'char[]' 
Line 13 -- Type: 'PERIOD'			Value: '.' 
Line 13 -- Type: 'IDENTIFIER'			Value: 'equals_char' 
Line 13 -- Type: 'OPEN_PAREN'			Value: '(' 
Line 13 -- Type: 'IDENTIFIER'			Value: 'char[]' 
Line 13 -- Type: 'IDENTIFIER'			Value: 'self' 
Line 13 -- Type: 'COMMA'			Value: ',' 
Line 13 -- Type: 'IDENTIFIER'			Value: 'char' 
Line 13 -- Type: 'IDENTIFIER'			Value: 'other' 
Line 13 -- Type: 'CLOSE_PAREN'			Value: ')' 
Line 13 -- Type: 'BODY'			Value: '	if(self.len != 1) return false;
	return self[0] == other;' 
Line 15 -- Type: 'MACRO'			Value: 'macro' 
Line 15 -- Type: 'IDENTIFIER'			Value: 'String' 
Line 15 -- Type: 'IDENTIFIER'			Value: 'read_file' 
Line 15 -- Type: 'OPEN_PAREN'			Value: '(' 
Line 15 -- Type: 'IDENTIFIER'			Value: 'String' 
Line 15 -- Type: 'IDENTIFIER'			Value: 'path' 
Line 15 -- Type: 'CLOSE_PAREN'			Value: ')' 
Line 15 -- Type: 'BODY'			Value: 'String! str = ( String) mem::new_array(char, std::io::file::get_size(path));
	//defer (void)str.free();
	String! read_file = (String) std::io::file::load_buffer(path, (char[])str);
	//defer (void) read_file.free();
	if(catch anyfault f = read_file){
		return "no file found.";
	}
    return read_file;' 
Line 17 -- Type: 'FN'			Value: 'fn' 
Line 17 -- Type: 'IDENTIFIER'			Value: 'void' 
Line 17 -- Type: 'IDENTIFIER'			Value: 'recursion' 
Line 17 -- Type: 'OPEN_PAREN'			Value: '(' 
Line 17 -- Type: 'IDENTIFIER'			Value: 'int' 
Line 17 -- Type: 'IDENTIFIER'			Value: 'value' 
Line 17 -- Type: 'EQUAL'			Value: '=' 
Line 17 -- Type: 'NUMBER_LIT'			Value: '10' 
Line 17 -- Type: 'BODY'			Value: '	io::printfn("This is a value %d!", value);
	if(value == 0) return;
	recursion(value-1);' 
Line 19 -- Type: 'FN'			Value: 'fn' 
Line 19 -- Type: 'IDENTIFIER'			Value: 'PathList' 
Line 19 -- Type: 'IDENTIFIER'			Value: 'find_by_extension' 
Line 19 -- Type: 'OPEN_PAREN'			Value: '(' 
Line 19 -- Type: 'IDENTIFIER'			Value: 'Path' 
Line 19 -- Type: 'IDENTIFIER'			Value: 'directory' 
Line 19 -- Type: 'COMMA'			Value: ',' 
Line 19 -- Type: 'IDENTIFIER'			Value: 'String' 
Line 19 -- Type: 'IDENTIFIER'			Value: 'extension' 
Line 19 -- Type: 'COMMA'			Value: ',' 
Line 19 -- Type: 'IDENTIFIER'			Value: 'bool' 
Line 19 -- Type: 'IDENTIFIER'			Value: 'recursive' 
Line 19 -- Type: 'EQUAL'			Value: '=' 
Line 19 -- Type: 'IDENTIFIER'			Value: 'false' 
Line 19 -- Type: 'COMMA'			Value: ',' 
Line 19 -- Type: 'IDENTIFIER'			Value: 'int' 
Line 19 -- Type: 'IDENTIFIER'			Value: 'depth' 
Line 19 -- Type: 'EQUAL'			Value: '=' 
Line 19 -- Type: 'NUMBER_LIT'			Value: '10' 
Line 19 -- Type: 'BODY'			Value: '	PathList list;
	if(depth <= 0) return list;
	@pool(){
		Path cwd = path::getcwd()!!;
		PathList ls = std::io::path::ls(directory)!!; 
		path::chdir(directory)!!;
		foreach(Path currentPath : ls){
			if(std::io::path::is_dir(currentPath) && recursive){
				PathList sublist = find_by_extension(currentPath, extension, recursive, depth-1);
				while(sublist.len() > 0) list.push(directory.append(sublist.pop()!!.str_view())!!);
			}else if (try ex = currentPath.extension() && ex == "c3") {
				list.push(directory.append(currentPath.str_view())!!);
			}
			currentPath.free();
		}
		path::chdir(cwd)!!;
	};
	return list;' 
Line 20 -- Type: 'EOF'			Value: 'EOF' 
