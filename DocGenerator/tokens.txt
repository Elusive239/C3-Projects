Line 1 -- Type: 'MODULE'			Value: 'module' 
Line 1 -- Type: 'IDENTIFIER'			Value: 'docgenerator' 
Line 1 -- Type: 'SEMICOLON'			Value: ';' 
Line 2 -- Type: 'IMPORT'			Value: 'import' 
Line 2 -- Type: 'IDENTIFIER'			Value: 'libc' 
Line 2 -- Type: 'SEMICOLON'			Value: ';' 
Line 3 -- Type: 'IMPORT'			Value: 'import' 
Line 3 -- Type: 'IDENTIFIER'			Value: 'std' 
Line 3 -- Type: 'COLON'			Value: ':' 
Line 3 -- Type: 'COLON'			Value: ':' 
Line 3 -- Type: 'IDENTIFIER'			Value: 'io' 
Line 3 -- Type: 'SEMICOLON'			Value: ';' 
Line 4 -- Type: 'IMPORT'			Value: 'import' 
Line 4 -- Type: 'IDENTIFIER'			Value: 'std' 
Line 4 -- Type: 'COLON'			Value: ':' 
Line 4 -- Type: 'COLON'			Value: ':' 
Line 4 -- Type: 'IDENTIFIER'			Value: 'io' 
Line 4 -- Type: 'COLON'			Value: ':' 
Line 4 -- Type: 'COLON'			Value: ':' 
Line 4 -- Type: 'IDENTIFIER'			Value: 'file' 
Line 4 -- Type: 'SEMICOLON'			Value: ';' 
Line 5 -- Type: 'IMPORT'			Value: 'import' 
Line 5 -- Type: 'IDENTIFIER'			Value: 'std' 
Line 5 -- Type: 'COLON'			Value: ':' 
Line 5 -- Type: 'COLON'			Value: ':' 
Line 5 -- Type: 'IDENTIFIER'			Value: 'core' 
Line 5 -- Type: 'COLON'			Value: ':' 
Line 5 -- Type: 'COLON'			Value: ':' 
Line 5 -- Type: 'IDENTIFIER'			Value: 'mem' 
Line 5 -- Type: 'SEMICOLON'			Value: ';' 
Line 6 -- Type: 'IMPORT'			Value: 'import' 
Line 6 -- Type: 'IDENTIFIER'			Value: 'std' 
Line 6 -- Type: 'COLON'			Value: ':' 
Line 6 -- Type: 'COLON'			Value: ':' 
Line 6 -- Type: 'IDENTIFIER'			Value: 'collections' 
Line 6 -- Type: 'COLON'			Value: ':' 
Line 6 -- Type: 'COLON'			Value: ':' 
Line 6 -- Type: 'IDENTIFIER'			Value: 'list' 
Line 6 -- Type: 'SEMICOLON'			Value: ';' 
Line 8 -- Type: 'IDENTIFIER'			Value: 'int' 
Line 8 -- Type: 'IDENTIFIER'			Value: 'c' 
Line 8 -- Type: 'EQUAL'			Value: '=' 
Line 8 -- Type: 'NUMBER_LIT'			Value: '0' 
Line 9 -- Type: 'CONST'			Value: 'const' 
Line 9 -- Type: 'IDENTIFIER'			Value: 'int' 
Line 9 -- Type: 'IDENTIFIER'			Value: 'AB' 
Line 9 -- Type: 'EQUAL'			Value: '=' 
Line 9 -- Type: 'NUMBER_LIT'			Value: '0132' 
Line 11 -- Type: 'ENUM'			Value: 'enum' 
Line 11 -- Type: 'IDENTIFIER'			Value: 'Test' 
Line 11 -- Type: 'COLON'			Value: ':' 
Line 11 -- Type: 'IDENTIFIER'			Value: 'int' 
Line 11 -- Type: 'OPEN_PAREN'			Value: '(' 
Line 11 -- Type: 'IDENTIFIER'			Value: 'String' 
Line 11 -- Type: 'IDENTIFIER'			Value: 'value' 
Line 11 -- Type: 'CLOSE_PAREN'			Value: ')' 
Line 11 -- Type: 'BODY'			Value: '	FA = "war"' 
Line 13 -- Type: 'FAULT'			Value: 'fault' 
Line 13 -- Type: 'IDENTIFIER'			Value: 'MyFault' 
Line 13 -- Type: 'BODY'			Value: '	FAIL' 
Line 15 -- Type: 'STRUCT'			Value: 'struct' 
Line 15 -- Type: 'IDENTIFIER'			Value: 'MyStruct' 
Line 15 -- Type: 'BODY'			Value: '	int x;' 
Line 19 -- Type: 'COMMENT'			Value: 'This is a test of this kind of functions declaration!' 
Line 21 -- Type: 'MACRO'			Value: 'macro' 
Line 21 -- Type: 'IDENTIFIER'			Value: 'void' 
Line 21 -- Type: 'IDENTIFIER'			Value: 'MyStruct' 
Line 21 -- Type: 'PERIOD'			Value: '.' 
Line 21 -- Type: 'IDENTIFIER'			Value: 'test' 
Line 21 -- Type: 'OPEN_PAREN'			Value: '(' 
Line 21 -- Type: 'IDENTIFIER'			Value: '&self' 
Line 21 -- Type: 'CLOSE_PAREN'			Value: ')' 
Line 21 -- Type: 'EQUAL'			Value: '=' 
Line 21 -- Type: 'IDENTIFIER'			Value: '>' 
Line 21 -- Type: 'IDENTIFIER'			Value: 'hello' 
Line 21 -- Type: 'OPEN_PAREN'			Value: '(' 
Line 21 -- Type: 'CLOSE_PAREN'			Value: ')' 
Line 21 -- Type: 'SEMICOLON'			Value: ';' 
Line 23 -- Type: 'COMMENT'			Value: 'Adds two numbers' 
Line 24 -- Type: 'FN'			Value: 'fn' 
Line 24 -- Type: 'IDENTIFIER'			Value: 'int' 
Line 24 -- Type: 'IDENTIFIER'			Value: 'add' 
Line 24 -- Type: 'OPEN_PAREN'			Value: '(' 
Line 24 -- Type: 'IDENTIFIER'			Value: 'int' 
Line 24 -- Type: 'IDENTIFIER'			Value: 'x' 
Line 24 -- Type: 'COMMA'			Value: ',' 
Line 24 -- Type: 'IDENTIFIER'			Value: 'int' 
Line 24 -- Type: 'IDENTIFIER'			Value: 'y' 
Line 24 -- Type: 'CLOSE_PAREN'			Value: ')' 
Line 24 -- Type: 'EQUAL'			Value: '=' 
Line 24 -- Type: 'IDENTIFIER'			Value: '>' 
Line 24 -- Type: 'IDENTIFIER'			Value: 'x+y' 
Line 24 -- Type: 'SEMICOLON'			Value: ';' 
Line 26 -- Type: 'COMMENT'			Value: 'prints "Hello, world!" to the standard out.' 
Line 27 -- Type: 'MACRO'			Value: 'macro' 
Line 27 -- Type: 'IDENTIFIER'			Value: 'void' 
Line 27 -- Type: 'IDENTIFIER'			Value: 'hello' 
Line 27 -- Type: 'OPEN_PAREN'			Value: '(' 
Line 27 -- Type: 'CLOSE_PAREN'			Value: ')' 
Line 27 -- Type: 'EQUAL'			Value: '=' 
Line 27 -- Type: 'IDENTIFIER'			Value: '>' 
Line 27 -- Type: 'IDENTIFIER'			Value: 'io' 
Line 27 -- Type: 'COLON'			Value: ':' 
Line 27 -- Type: 'COLON'			Value: ':' 
Line 27 -- Type: 'IDENTIFIER'			Value: 'printn' 
Line 27 -- Type: 'OPEN_PAREN'			Value: '(' 
Line 27 -- Type: 'STRING_LIT'			Value: 'Hello, world!' 
Line 27 -- Type: 'CLOSE_PAREN'			Value: ')' 
Line 27 -- Type: 'SEMICOLON'			Value: ';' 
Line 29 -- Type: 'COMMENT'			Value: 'This is the main function. You will never guess what this does!' 
Line 30 -- Type: 'FN'			Value: 'fn' 
Line 30 -- Type: 'IDENTIFIER'			Value: 'int' 
Line 30 -- Type: 'IDENTIFIER'			Value: 'main' 
Line 30 -- Type: 'OPEN_PAREN'			Value: '(' 
Line 30 -- Type: 'IDENTIFIER'			Value: 'String[]' 
Line 30 -- Type: 'IDENTIFIER'			Value: 'args' 
Line 30 -- Type: 'CLOSE_PAREN'			Value: ')' 
Line 31 -- Type: 'BODY'			Value: '	String path = $$FILEPATH;//"main.c3";
	TokenList list = tokenize(path); defer list.free();
	list.dump_tokens("tokens.txt");
	io::printfn("Token Count: %d", list.len());
	
	String output = list.parse(); defer output.free();
	io::printfn("Full List:\n%s", output);
	File! file = io::file::open("TEST.md", "w");
	if(catch anyfault f = file){
		io::printn("Couldn't open file to output markdown");
		return -1;
	}
	file.write(output)!!;
	file.close()!!;
	return 0;' 
Line 31 -- Type: 'EOF'			Value: 'EOF' 
